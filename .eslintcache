[{"/Users/jungchuloh/Documents/pj_react/todo-app/src/App.js":"1","/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoTemplate.js":"2","/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoInsert.js":"3","/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoListItem.js":"4","/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoList.js":"5","/Users/jungchuloh/Documents/pj_react/todo-app/src/reportWebVitals.js":"6","/Users/jungchuloh/Documents/pj_react/todo-app/src/index.js":"7"},{"size":2264,"mtime":1607920255553,"results":"8","hashOfConfig":"9"},{"size":294,"mtime":1607670631915,"results":"10","hashOfConfig":"9"},{"size":903,"mtime":1607741918390,"results":"11","hashOfConfig":"9"},{"size":890,"mtime":1607923428240,"results":"12","hashOfConfig":"9"},{"size":997,"mtime":1607922431281,"results":"13","hashOfConfig":"9"},{"size":362,"mtime":1607668374417,"results":"14","hashOfConfig":"9"},{"size":500,"mtime":1607668374416,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1j990bs",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/jungchuloh/Documents/pj_react/todo-app/src/App.js",["33"],"import React, { useReducer, useState, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulkTodos() {\n  const array = [];\n  for (let i = 0; i <= 2500; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n\n  return array;\n}\n\nfunction todoReducer(todos, action) {\n  switch (action.type) {\n    case 'INSERT': // 새로 추가\n      // {type: 'INSERT', todo: { id:1, text: 'todo', checked: false} }\n      return todos.concat(action.todo);\n    case 'REMOVE': // 제거\n      // {type: 'REMOVE', id: 1 }\n      return todos.filter((todo) => todo.id !== action.id);\n    case 'TOGGLE': //토글\n      // { type: 'REMOVE', id: 1 }\n      return todos.map((todo) =>\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\n      );\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  // createBulkTodos() 형태로 넣으면 리랜더링 될때마다 호출됨\n  // createBulkTodos 함수 형태로 넣으면 처음 랜더링때만 호출\n  // const [todos, setTodos] = useState(createBulkTodos);\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\n\n  // 고유값으로 사용될 id\n  // ref를 사용하여 변수 담기\n  const nextId = useRef(2501);\n  const onInsert = useCallback((text) => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false,\n    };\n    // setTodos((todos) => todos.concat(todo));\n    dispatch({ type: 'INSERT', todo });\n    nextId.current += 1; // nextId 1씩 더하기\n  }, []);\n  const onRemove = useCallback((id) => {\n    // setTodos((todos) => todos.filter((todo) => todo.id !== id));\n    dispatch({ type: 'REMOVE', id });\n  }, []);\n  const onToggle = useCallback((id) => {\n    // setTodos((todos) =>\n    //   todos.map((todo) =>\n    //     todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n    //   ),\n    // );\n    dispatch({ type: 'TOGGLE', id });\n  }, []);\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoTemplate.js",[],["34","35"],"/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoInsert.js",["36"],"import React, { useState, useCallback } from 'react';\nimport { MdAdd } from 'react-icons/md';\nimport './TodoInsert.scss';\n\nconst TodoInsert = ({ onInsert }) => {\n  const [value, setValue] = useState('');\n\n  const onChange = useCallback((e) => {\n    setValue(e.target.value);\n  });\n\n  const onSubmit = useCallback(\n    (e) => {\n      onInsert(value);\n      setValue(''); //value 값 초기화\n      // submit 이벤트는 브라우저에서 새로고침을 발생시킵니다.\n      // 이를 방지하기 위해 이 함수를 호출 합니다.\n      e.preventDefault();\n    },\n    [onInsert, value],\n  );\n\n  return (\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\n      <input\n        placeholder=\"할 일을 입력하세요\"\n        value={value}\n        onChange={onChange}\n      />\n      <button type=\"submit\">\n        <MdAdd />\n      </button>\n    </form>\n  );\n};\n\nexport default TodoInsert;\n","/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoListItem.js",[],"/Users/jungchuloh/Documents/pj_react/todo-app/src/components/TodoList.js",[],"/Users/jungchuloh/Documents/pj_react/todo-app/src/reportWebVitals.js",[],"/Users/jungchuloh/Documents/pj_react/todo-app/src/index.js",[],{"ruleId":"37","severity":1,"message":"38","line":1,"column":29,"nodeType":"39","messageId":"40","endLine":1,"endColumn":37},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":8,"column":20,"nodeType":"39","endLine":8,"endColumn":31},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation"]